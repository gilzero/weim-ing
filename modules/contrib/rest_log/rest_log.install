<?php

/**
 * @file
 * Contains rest_log.install.
 */

use Drupal\views\Entity\View;
use Drupal\views\Views;
use Symfony\Component\Yaml\Yaml;

/**
 * Re-import views and import new action.
 */
function rest_log_update_9001(&$sandbox) {
  \Drupal::service('config.installer')->installDefaultConfig('module', 'rest_log');
}

/**
 * Add option to save same host requests.
 */
function rest_log_update_9002() {
  $config = \Drupal::configFactory()->getEditable('rest_log.settings');
  $config->set('include_same_host', TRUE);
  $config->save();
}

/**
 * Add response time field.
 */
function rest_log_update_9003(&$sandbox) {
  $entity_definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  $entity_type = $entity_definition_update_manager->getEntityType('rest_log');
  /** @var \Drupal\Core\Field\BaseFieldDefinition $field_storage_definition */
  $field_storage_definition = [$entity_type->getClass(), 'baseFieldDefinitions']($entity_type)['response_time'];
  $entity_definition_update_manager->installFieldStorageDefinition('response_time', $entity_type->id(), 'rest_log', $field_storage_definition);
}

/**
 * Update views config.
 */
function rest_log_update_9004() {
  $message = '';
  $old_view_id = 'rest_log';
  // Only delete the old view, if it is existing.
  if (View::load($old_view_id)) {
    // Delete the old view.
    $oldViewConfig = \Drupal::service('config.factory')->getEditable('views.view.' . $old_view_id);
    $oldViewConfig->delete();
    $message .= 'The old "' . $old_view_id . '" view has been deleted.';
  }
  else {
    $message .= 'Not deleting the old "' . $old_view_id . '" view, since it does not exists.';
  }

  $message .= "\n";

  // Only create if the new view doesn't exist and views is enabled.
  $new_view_id = 'rest_log';
  if (!View::load($new_view_id)) {
    $config_path = \Drupal::service('extension.list.module')->getPath('rest_log') . '/config/install/views.view.' . $new_view_id . '.yml';
    $data = Yaml::parseFile($config_path);
    \Drupal::configFactory()->getEditable('views.view.' . $new_view_id)->setData($data)->save(TRUE);
    $message .= 'The new "' . $new_view_id . '" view has been created.';
  }
  else {
    $message .= 'Not creating the "' . $new_view_id . '" view, since it already exists.';
  }
  return $message;
}

/**
 * Add response header field.
 */
function rest_log_update_9005(&$sandbox) {
  $entity_definition_update_manager = \Drupal::entityDefinitionUpdateManager();
  $entity_type = $entity_definition_update_manager->getEntityType('rest_log');
  /** @var \Drupal\Core\Field\BaseFieldDefinition $field_storage_definition */
  $field_storage_definition = [$entity_type->getClass(), 'baseFieldDefinitions']($entity_type)['response_header'];
  $entity_definition_update_manager->installFieldStorageDefinition('response_header', $entity_type->id(), 'rest_log', $field_storage_definition);
}

/**
 * Remove error_code and error_message fields.
 */
function rest_log_update_9006(&$sandbox) {
  // Remove fields form the view.
  $view = Views::getView('rest_log');
  $view->setDisplay('details');
  if ($view->getHandler('details', 'field', 'error_code')) {
    $view->removeHandler('details', 'field', 'error_code');
  }
  if ($view->getHandler('details', 'field', 'error_message')) {
    $view->removeHandler('details', 'field', 'error_message');
  }
  if ($view->getHandler('listing', 'filter', 'error_message')) {
    $view->removeHandler('listing', 'filter', 'error_message');
  }
  $view->save();

  // Uninstall fields from rest_log entity.
  $update_manager = \Drupal::entityDefinitionUpdateManager();
  $definition = $update_manager->getFieldStorageDefinition('error_code', 'rest_log');
  if ($definition) {
    $update_manager->uninstallFieldStorageDefinition($definition);
  }
  $definition = $update_manager->getFieldStorageDefinition('error_message', 'rest_log');
  if ($definition) {
    $update_manager->uninstallFieldStorageDefinition($definition);
  }
}

/**
 * Update Request uri length to 2048.
 */
function rest_log_update_9007(&$sandbox) {
  $connection = \Drupal::database();
  if ($connection->schema()->tableExists('rest_log') && $connection->databaseType() != 'sqlite') {
    $new = [
      'type' => 'varchar',
      'length' => 2048,
      'binary' => FALSE,
    ];
    $connection->schema()->changeField('rest_log', 'request_uri', 'request_uri', $new);
  }
}
